import streamlit as st
from streamlit_javascript import st_javascript
import json
import requests

st.set_page_config(page_title="–ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", layout="centered", initial_sidebar_state="collapsed")
st.title("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")

# üß† –ü–æ–ª—É—á–∞–µ–º initData –∫–∞–∫ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π JSON
init_data_raw = st_javascript(
    """
    () => {
        try {
            const tg = window.Telegram?.WebApp;
            if (!tg) return JSON.stringify({ error: "NO_TG_OBJECT" });
            tg.ready();
            tg.expand();
            return JSON.stringify({
                initData: tg.initData || "EMPTY_INIT_DATA",
                platform: tg.platform,
                isExpanded: tg.isExpanded,
                colorScheme: tg.colorScheme
            });
        } catch (e) {
            return JSON.stringify({ error: "JS_ERROR", message: e.message });
        }
    }
    """
)

# üîç –û—Ç–ª–∞–¥–∫–∞
st.subheader("init_data_raw:")
st.write(init_data_raw)

# üß™ –ü–∞—Ä—Å–∏–º JSON
try:
    init_data = json.loads(init_data_raw)
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ initData: {e}")
    init_data = {}

# ‚¨áÔ∏è –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
st.subheader("Parsed initData")
st.json(init_data)

# üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏, –µ—Å–ª–∏ initData –≤–∞–ª–∏–¥–µ–Ω
if isinstance(init_data, dict) and init_data.get("initData") not in ["", "EMPTY_INIT_DATA"]:
    response = requests.post("https://87da-37-150-246-43.ngrok-free.app/verify", json={"initData": init_data["initData"]})
    result = response.json()
    if result.get("ok"):
        user = result.get("user", {})
        st.success(f"–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ {user.get('username', '–≥–æ—Å—Ç—å')} (ID: {user.get('id')})")
    else:
        st.warning("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å")
else:
    st.warning("–ù–µ—Ç initData –æ—Ç Telegram WebApp")


# import streamlit as st
# from streamlit_calendar import calendar
# from datetime import datetime, timezone, timedelta
# # from database.requests import add_meeting  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –∑–¥–µ—Å—å
# import asyncio
# from streamlit_javascript import st_javascript
# import json
# import requests
# import time
# import streamlit.components.v1 as components



# # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
# st.set_page_config(page_title="–ö–∞–ª–µ–Ω–¥–∞—Ä—å", layout="centered", initial_sidebar_state="collapsed")
# # st.set_page_config(page_title="–ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", layout="centered")
# # st.title("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ Telegram")


# hide_streamlit_style = """
# <style>
# #MainMenu {visibility: hidden;}
# footer {visibility: hidden;}
# header {visibility: hidden;}
# </style>
# """
# st.markdown(hide_streamlit_style, unsafe_allow_html=True)

# # components.html(
# #     """
# #     <script src="https://telegram.org/js/telegram-web-app.js?57"></script>
# #     """,
# #     height=0,
# # )

# # –ü–æ–ª—É—á–∞–µ–º initData –∏–∑ Telegram WebApp
# # init_data = st_javascript(
# #     """
# #     () => {
# #         const tg = window.Telegram.WebApp;
# #         tg.expand();
# #         return tg.initData || "";
# #     }
# #     """
# # )
# # init_data = st_javascript(
# #     """
# #     () => {
# #         const tg = window.Telegram.WebApp;
# #         tg.expand();
# #         console.log("initData:", tg.initData);
# #         console.log("initDataUnsafe:", tg.initDataUnsafe);
# #         return tg.initData || tg.initDataUnsafe || "";
# #     }
# #     """
# # )

# # init_data = st_javascript(
# #     """
# #     () => {
# #         const tg = window.Telegram?.WebApp;
# #         if (!tg) {
# #             return "tg_undefined";
# #         }
# #         if (!tg.initData) {
# #             return "initData_empty";
# #         }
# #         return tg.initData;
# #     }
# #     """
# # )

# # init_data = st_javascript(
# #     """
# #     () => {
# #         try {
# #             const tg = window.Telegram?.WebApp;
# #             if (!tg) {
# #                 return "Telegram WebApp is undefined";
# #             }
# #             if (!tg.initData) {
# #                 return "initData is missing or empty";
# #             }
# #             return tg.initData;
# #         } catch (e) {
# #             return "JS Error: " + e.toString();
# #         }
# #     }
# #     """
# # )

# # init_data = st_javascript(
# #     """
# #     () => {
# #         try {
# #             const tg = window.Telegram.WebApp;
# #             tg.ready();
# #             tg.expand();
# #             return tg.initData || "empty";
# #         } catch (e) {
# #             return "tg_error: " + e.message;
# #         }
# #     }
# #     """
# # )

# # init_data = st_javascript(
# #     """
# #     () => {
# #         try {
# #             const tg = window.Telegram.WebApp;
# #             tg.ready();
# #             tg.expand();
# #             console.log("Telegram WebApp initialized", tg.initData);
# #             return {
# #                 initData: tg.initData || "empty",
# #                 isExpanded: tg.isExpanded,
# #                 platform: tg.platform,
# #                 colorScheme: tg.colorScheme
# #             };
# #         } catch (e) {
# #             console.error("Error initializing Telegram WebApp:", e);
# #             return "tg_error: " + e.message;
# #         }
# #     }
# #     """
# # )

# init_data = st_javascript(
#     """
#     (() => {
#         const tgScript = document.createElement("script");
#         tgScript.src = "https://telegram.org/js/telegram-web-app.js";
#         document.head.appendChild(tgScript);

#         tgScript.onload = () => {
#             const tg = window.Telegram.WebApp;
#             tg.ready();
#             tg.expand();
#             return {
#                 initData: tg.initData || "empty",
#                 isExpanded: tg.isExpanded,
#                 platform: tg.platform,
#                 colorScheme: tg.colorScheme
#             };
#         };

#         tgScript.onerror = () => {
#             console.error("Failed to load Telegram Web App script.");
#         };
#     })();
#     """
# )

# # time.sleep(3)
# st.write("Telegram WebApp info:", str(init_data))



# # # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
# # username = "–≥–æ—Å—Ç—å"
# # user_id = "–∞–Ω–æ–Ω–∏–º"

# # st.write("init_data:", init_data)

# # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ Telegram —á–µ—Ä–µ–∑ –±–µ–∫–µ–Ω–¥
# if init_data:
#     try:
#         # verify_url = "http://localhost:8000/verify"
#         verify_url = "https://87da-37-150-246-43.ngrok-free.app/verify"
#         response = requests.post(verify_url, json={"initData": init_data})
#         result = response.json()
#         if result.get("ok"):
#             user_data = result.get("user", {})
#             username = user_data.get("username", "–≥–æ—Å—Ç—å")
#             user_id = str(user_data.get("id", "–∞–Ω–æ–Ω–∏–º"))
#             st.success(f"–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ {username}")
#         else:
#             st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å Telegram-–ø–æ–¥–ø–∏—Å—å.")
#     except Exception as e:
#         st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
# else:
#     st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å initData –∏–∑ Telegram WebApp.")


# calendar_options = {
#     "editable": True,
#     "selectable": True,
#     "headerToolbar": {
#         "left": "today prev,next",
#         "center": "title",
#         "right": "resourceTimelineDay,resourceTimelineWeek,resourceTimelineMonth",
#     },
#     # "slotDuration": "00:30:00",
#     "slotMinTime": "00:00:00",
#     "slotMaxTime": "24:00:00",
#     "timeZone": "UTC",  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É UTC
#     "slotLabelFormat": {  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
#         "hour": "2-digit",
#         "minute": "2-digit",
#         "hour12": False,  # –û—Ç–∫–ª—é—á–∞–µ–º 12-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
#     },
#     # "initialView": "resourceTimelineDay",
#     "initialView": "timeGridWeek",  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º timeGrid
#     # "resourceGroupField": "building",
#     # "resources": [
#     #     {"id": "a", "building": "Building A", "title": "Building A"},
#     #     {"id": "b", "building": "Building A", "title": "Building B"},
#     #     {"id": "c", "building": "Building B", "title": "Building C"},
#     #     {"id": "d", "building": "Building B", "title": "Building D"},
#     #     {"id": "e", "building": "Building C", "title": "Building E"},
#     #     {"id": "f", "building": "Building C", "title": "Building F"},
#     # ],
# }
# # calendar_events = [
# #     {
# #         "title": "Event 1",
# #         "start": "2023-07-31T08:30:00",
# #         "end": "2023-07-31T10:30:00",
# #         "resourceId": "a",
# #     },
# #     {
# #         "title": "Event 2",
# #         "start": "2023-07-31T07:30:00",
# #         "end": "2023-07-31T10:30:00",
# #         "resourceId": "b",
# #     },
# #     {
# #         "title": "Event 3",
# #         "start": "2023-07-31T10:40:00",
# #         "end": "2023-07-31T12:30:00",
# #         "resourceId": "a",
# #     }
# # ]
# custom_css = """
#     .fc-event-past {
#         opacity: 0.8;
#     }
#     .fc-event-time {
#         font-style: italic;
#     }
#     .fc-event-title {
#         font-weight: 700;
#     }
#     .fc-toolbar-title {
#         font-size: 2rem;
#     }
# """

# calendar = calendar(
#     # events=calendar_events,
#     options=calendar_options,
#     custom_css=custom_css,
#     key="calendar",  # Assign a widget key to prevent state loss
# )
# st.info("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è'")
# # st.write(calendar)

# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
# if "selected_range" not in st.session_state:
#     st.session_state.selected_range = None

# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
# if calendar:
#     callback_data = calendar.get("callback")

#     if callback_data:
#         if callback_data == "select":
#             # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏
#             st.session_state.selected_range = {
#                 # "start": calendar["select"]["start"],
#                 # "end": calendar["select"]["end"],
#                 "start": (datetime.fromisoformat(calendar["select"]["start"])).isoformat(),
#                 "end": (datetime.fromisoformat(calendar["select"]["end"])).isoformat(),
#             }
#         elif callback_data == "dateClick":
#             # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
#             st.session_state.selected_range = {
#                 # "start": calendar["dateClick"]["date"],
#                 # "end": calendar["dateClick"][
#                 #     "date"
#                 # ],  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω–µ—Ü –Ω–∞ —Ç–æ –∂–µ –≤—Ä–µ–º—è
#                 "start": (datetime.fromisoformat(calendar["dateClick"]["date"])).isoformat(),
#                 "end": (datetime.fromisoformat(calendar["dateClick"]["date"]) + timedelta(minutes=30)).isoformat(),
#             }


# # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ API
# if calendar and "start" in calendar:
#     start_time = st.session_state.selected_range["start"]
#     end_time = st.session_state.selected_range["end"]

#     date = datetime.fromisoformat(start_time).date()
#     start_time_obj = datetime.fromisoformat(start_time).time()
#     end_time_obj = datetime.fromisoformat(end_time).time()

#     # title = calendar.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
#     # time = calendar["start"]

#     st.success(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {date} –≤ {start_time_obj}-{end_time_obj}")

#     if st.button("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"):
#         try:
#             # register_url = "http://localhost:8000/register"
#             register_url = "https://87da-37-150-246-43.ngrok-free.app/register"
#             payload = {
#                 "date": date,
#                 "start_time": start_time_obj,
#                 "end_time": end_time_obj,
#                 "tg_id": user_id,
#             }
#             reg_response = requests.post(register_url, json=payload)
#             reg_result = reg_response.json()

#             if reg_response.status_code == 200:
#                 st.success("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å!")
#             else:
#                 st.error(f"–û—à–∏–±–∫–∞: {reg_result.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
#         except Exception as e:
#             st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {e}")
















# # # # # –ö–Ω–æ–ø–∫–∞ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
# # # # if st.session_state.selected_range:
# # # #     start_time = st.session_state.selected_range["start"]
# # # #     end_time = st.session_state.selected_range["end"]

# # # #     st.write("–í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (UTC):")
# # # #     st.write("–ù–∞—á–∞–ª–æ:", start_time)
# # # #     st.write("–û–∫–æ–Ω—á–∞–Ω–∏–µ:", end_time)

# # # #     if st.button("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"):
# # # #         st.success("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–∞! –ù–∞—á–∞–ª–æ: {}, –û–∫–æ–Ω—á–∞–Ω–∏–µ: {}".format(start_time, end_time))
# # # # else:
# # # #     # st.write(calendar.get("callback"))
# # # #     # st.write(st.session_state.selected_range)
# # # #     st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏.")


# # # –ö–Ω–æ–ø–∫–∞ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
# # if st.session_state.selected_range:
# #     start_time = st.session_state.selected_range["start"]
# #     end_time = st.session_state.selected_range["end"]

# #     date = datetime.fromisoformat(start_time).date()
# #     start_time_obj = datetime.fromisoformat(start_time).time()
# #     end_time_obj = datetime.fromisoformat(end_time).time()

# #     st.write("–í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (UTC):")
# #     st.write("–ù–∞—á–∞–ª–æ:", start_time)
# #     st.write("–û–∫–æ–Ω—á–∞–Ω–∏–µ:", end_time)


# #     # tg_id = 858747013  # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å tg_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# #     if st.button("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"):
# #         try:
# #             register_url = "http://localhost:8000/register"
#             # register_url = "https://87da-37-150-246-43.ngrok-free.app/register"
# #             payload = {
# #                 "date": date,
# #                 "start_time": start_time,
# #                 "end_time": end_time,
# #                 "tg_id": user_id
# #             }
# #             resp = requests.post(register_url, json=payload)
# #             result = resp.json()
# #             if result.get("ok"):
# #                 st.success("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å!")
# #             else:
# #                 st.error(f"–û—à–∏–±–∫–∞: {result.get('error')}")
# #         except Exception as e:
# #             st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")

# #     # if st.button("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"):
# #     #     async def save_meeting():
# #     #         # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
# #     #         date = datetime.fromisoformat(start_time).date()
# #     #         start_time_obj = datetime.fromisoformat(start_time).time()
# #     #         end_time_obj = datetime.fromisoformat(end_time).time()

# #     #         # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏
# #     #         await add_meeting(date, start_time_obj, end_time_obj, tg_id)
# #     #         st.success("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–∞!")

# #     #     # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
# #     #     asyncio.run(save_meeting())


# # # # async def save_meeting():
# # # #     date = datetime.fromisoformat(start_time).date()
# # # #     start_time_obj = datetime.fromisoformat(start_time).time()
# # # #     end_time_obj = datetime.fromisoformat(end_time).time()
# # # #     await add_meeting(date, start_time_obj, end_time_obj, tg_id)
# # # #     st.session_state['meeting_saved'] = True

# # # # def run_async_task():
# # # #     try:
# # # #         loop = asyncio.get_running_loop()
# # # #     except RuntimeError:
# # # #         loop = asyncio.new_event_loop()
# # # #         asyncio.set_event_loop(loop)
# # # #         loop.run_until_complete(save_meeting())
# # # #     else:
# # # #         asyncio.run_coroutine_threadsafe(save_meeting(), loop)

# # # # if st.button("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"):
# # # #     st.session_state['meeting_saved'] = False
# # # #     run_async_task()

# # # # if st.session_state.get('meeting_saved'):
# # # #     st.success("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–∞!")


# # # async def save_meeting():
# # #     # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
# # #     date = datetime.fromisoformat(start_time).date()
# # #     start_time_obj = datetime.fromisoformat(start_time).time()
# # #     end_time_obj = datetime.fromisoformat(end_time).time()

# # #     # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏
# # #     await add_meeting(date, start_time_obj, end_time_obj, tg_id)
# # #     st.success("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–∞!")

# # # if st.button("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"):
# # #     # await save_meeting()  # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å await
# # #     asyncio.run(save_meeting())

# # # # # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
# # # # if st.button("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"):
# # # #     # asyncio.run(save_meeting())  # –ï—Å–ª–∏ —ç—Ç–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ
# # # #     # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –µ–µ
# # # #     task = asyncio.create_task(save_meeting())
# # # #     # # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
# # # #     # loop = asyncio.get_event_loop()
# # # #     # if loop.is_running():
# # # #     #     # –ï—Å–ª–∏ —Ü–∏–∫–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º create_task
# # # #     #     asyncio.create_task(save_meeting(start_time, end_time, tg_id))
# # # #     # else:
# # # #     #     # –ï—Å–ª–∏ —Ü–∏–∫–ª –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
# # # #     #     loop.run_until_complete(save_meeting(start_time, end_time, tg_id))

# # # # if st.button("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"):
# # # #     loop = asyncio.get_event_loop()
# # # #     loop.run_until_complete(save_meeting())

# # # # # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
# # # # def run_async_task():
# # # #     loop = asyncio.get_event_loop()
# # # #     loop.create_task(save_meeting())

# # # # run_async_task()

# # # # streamlit run template.py